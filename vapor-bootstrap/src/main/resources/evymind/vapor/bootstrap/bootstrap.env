# This file controls what file are to be put on classpath or command line.
#
# Format is as follows:
#
# Each line contains entry in the format:
#
#  SUBJECT [ [!] CONDITION [AND|OR] ]*
# 
# where SUBJECT: 
#   ends with ".class" is the Main class to run.
#   ends with ".ecs" is a configuration file for the command line
#   ends with "/" is a directory from which to add all jar and zip files. 
#   ends with "/*" is a directory from which to add all unconsidered jar and zip files.
#   ends with "/**" is a directory from which to recursively add all unconsidered jar and zip files.
#   Containing = are used to assign system properties.
#   Containing ~= are used to assign bootstrap properties.
#   Containing /= are used to assign a canonical path.
#   all other subjects are treated as files to be added to the classpath.
#
# ${name} is expanded to a bootstrap property
# $(name) is expanded to either a bootstrap property or a system property. 
# The bootstrap property ${version} is defined as the version of the bootstrap.jar
#
# Files booting with "/" are considered absolute, all others are relative to
# the home directory.
#
# CONDITION is one of:
#   always
#   never
#   available classname        # true if class on classpath
#   property name              # true if set as bootstrap property
#   system   name              # true if set as system property
#   exists file                # true if file/dir exists
#   java OPERATOR version      # java version compared to literal
#   nargs OPERATOR number      # number of command line args compared to literal
#   OPERATOR := one of "<",">","<=",">=","==","!="
#
# CONTITIONS can be combined with AND OR or !, with AND being the assume
# operator for a list of CONDITIONS.
#
# Classpath operations are evaluated on the fly, so once a class or jar is
# added to the classpath, subsequent available conditions will see that class.
#
# The configuration file may be divided into sections with option names like:
# [ssl,default]
#
# Clauses after a section header will only be included if they match one of the tags in the 
# options property.  By default options are set to "default,*" or the OPTIONS property may
# be used to pass in a list of tags, eg. :
#
#    java -jar bootstrap.jar OPTIONS=vapor,jsp,ssl
#
# The tag '*' is always appended to the options, so any section with the * tag is always 
# applied.
#

# add a property defined classpath
${path}.path                                     property path

# add a property defined library directory
${lib}/**                                        exists ${lib}

# Try different settings of vapor.home until the bootstrap.jar is found.
vapor.home=.                                     ! exists $(vapor.home)/bootstrap.jar 
vapor.home=..                                    ! exists $(vapor.home)/bootstrap.jar 
vapor.home=vapor-distribution/src/main/resources     ! exists $(vapor.home)/bootstrap.jar 
vapor.home=../vapor-distribution/src/main/resources  ! exists $(vapor.home)/bootstrap.jar 
vapor.home=.                                     ! exists $(vapor.home)/bootstrap.jar
vapor.home/=$(vapor.home)                        exists $(vapor.home)/bootstrap.jar

# The main class to run
evymind.vapor.config.DefaultConfiguration.class
${bootstrap.class}.class                         property bootstrap.class

# The default configuration files
$(vapor.home)/etc/vapor.xml                      nargs == 0
./vapor-server/src/main/config/etc/vapor.xml     nargs == 0 AND ! exists $(vapor.home)/etc/vapor.xml

# Default OPTIONS if not specified on the command line
OPTIONS~=default,*                               ! property OPTIONS

# Add a resources directory if it is there
[All,resources,default]
$(vapor.home)/resources/
           
# Add vapor modules
[*]
$(vapor.home)/lib/vapor-core-$(version).jar                                             ! available evymind.vapor.core.Trasport
$(vapor.home)/lib/vapor-envelope-$(version).jar                                         ! available evymind.vapor.message.envelope.encrypt.AESEncryptionEnvelope

[Server,All,config,default]
$(vapor.home)/lib/vapor-config-$(version).jar                                           ! available evymind.vapor.config.DefaultConfiguration
         
[Server,All,server,default]
$(vapor.home)/lib/vapor-server-$(version).jar                                           ! available evymind.vapor.server.Server
                            
[Server,All,app,default]
$(vapor.home)/lib/vapor-app-$(version).jar                                              ! available evymind.vapor.app.AppContext
                                  
[Server,All,deploy,default]
$(vapor.home)/lib/vapor-deploy-$(version).jar                                           ! available evymind.vapor.deploy.DeploymentManager
           
[All,jmx]
$(vapor.home)/lib/vapor-jmx-$(version).jar                                              ! available evymind.vapor.jmx.MBeanContainer
                  
[All,Client,client]
$(vapor.home)/lib/vapor-client-$(version).jar                                           ! available evymind.vapor.client.SuperClient

# Add ext if it exists
[Server,All,default,ext]        
$(vapor.home)/lib/ext/**

# Add all other sub-directories in /lib/ as options in a dynamic way
[All,=$(vapor.home)/lib/**]        

