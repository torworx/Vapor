buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
}

configure(allprojects) {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'idea'

    group = 'evymind.vapor.examples.echo'

    sourceCompatibility=1.6
    targetCompatibility=1.6

    ext.vaporVersion = "0.0.8-SNAPSHOT"
	
	setBuildDir 'target'

	[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:none']

	sourceSets {
		main {
			java {
				srcDir 'src/main/java'
			}
			resources {
				srcDir 'src/main/resources'
			}
			output.resourcesDir = 'target/classes'
    		output.classesDir   = 'target/classes'
		}
		test {
			java {
				srcDir 'src/test/java'
			}
			resources {
				srcDir 'src/test/resources'
			}
			output.resourcesDir = 'target/test-classes'
    		output.classesDir   = 'target/test-classes'
		}
	}

    repositories {
		mavenLocal()
        mavenCentral()
    }

}

configure(subprojects) { subproject ->
	apply plugin: 'java'
	
    jar {
        manifest.attributes['Implementation-Title'] = subproject.name
        manifest.attributes['Implementation-Version'] = subproject.version
    }
}

project('echo-api') {
	description = 'Echo API'
}

project('echo-server') {
	description = 'Echo Server'
	dependencies {
		compile project(":echo-api")
	}

}

project('echo-client') {
	description = 'Echo Client'
	dependencies {
		compile project(":echo-api")
        compile "evymind.vapor:vapor-client:${vaporVersion}"
        testCompile "junit:junit:4.10"
	}
}

configure(rootProject) {
    description = 'Echo'

    task distSar(type: Zip) {
        group = 'Distribution'
        extension = 'sar'
        description = "Build SAR."

        into ("/") {
            from('app.yml')
        }

        def projectNames = rootProject.subprojects*.name;
        projectNames.remove("echo-client");

        subprojects.each { subproject ->

            into ("/lib") {
                if (projectNames.contains(subproject.name)) {
                    from subproject.jar
                }
            }
        }


        def artifacts = new HashSet()
        subprojects.each { subproject ->
            if (projectNames.contains(subproject.name)) {
                subproject.configurations.runtime.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                    def dependency = artifact.moduleVersion.id
                    if (!projectNames.contains(dependency.name)) {
                        artifacts << artifact.file
                    }
                }
            }
        }

        from(artifacts) {
            into "/lib"
        }
    }

    task wrapper(type: Wrapper) {
        description = 'Generates gradlew[.bat] scripts'
        gradleVersion = '1.0'
    }
}